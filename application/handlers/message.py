import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from application.db.database_cars import add_car
from application.db.database_users import get_user_status
from application.utils.admin_check import update_user_status_based_on_admin



async def handle_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if not update.message:
            logging.info('Received non-message update: %s', update)
            return

        user_id = update.message.from_user.id
        message_text = update.message.text
        logging.info(f"Received message from user {user_id}: {message_text}")

        if context.user_data.get('in_ad_form'):
            await handle_new_ad_input(update, context)
        else:
            await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É ü•∫. \n–í–≤–µ–¥–∏—Ç–µ /menu")


    except Exception as e:
        logging.error(f"Error in handle_user_input handler: {e}")
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        

async def handle_new_ad_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if not update.message:
            logging.info('Received non-message update: %s', update)
            return

        user_id = update.message.from_user.id
        message_text = update.message.text

        await update_user_status_based_on_admin(user_id)
        user_status = await get_user_status(user_id)
        if user_status == 'no_user':
            await update.message.reply_text('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.')
            return

        if 'car_data' not in context.user_data:
            context.user_data['car_data'] = {}

        car_data = context.user_data['car_data']
        step = context.user_data.get('step', 'make')

        steps = {
            'make': 'üöó –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Ford, Toyota):',
            'model': 'üìã –ú–æ–¥–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Focus, Corolla):',
            'year': 'üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ (–∏–ª–∏ /skip):',
            'price': 'üí≤ –¶–µ–Ω–∞ (–≤ —Ä—É–±–ª—è—Ö):',
            'mileage': 'üõ£Ô∏è –ü—Ä–æ–±–µ–≥ (–≤ –∫–º, –∏–ª–∏ /skip):',
            'place': 'üìç –ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ (–≥–æ—Ä–æ–¥ –∏–ª–∏ /skip):',
            'description': 'üìù –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ /skip):'
        }

        if message_text.lower() != '/skip':
            car_data[step] = message_text
            logging.info(f"User {update.message.from_user.id} entered {step}: {message_text}")
        else:
            car_data[step] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            logging.info(f"User {update.message.from_user.id} skipped {step}")

        step_keys = list(steps.keys())
        current_index = step_keys.index(step)
        next_step = step_keys[current_index + 1] if current_index + 1 < len(step_keys) else None

        if next_step:
            context.user_data['step'] = next_step
            await update.message.reply_text(steps[next_step])
            logging.info(f"Prompting user {update.message.from_user.id} for {next_step}")
        else:
            make = car_data.get('make')
            model = car_data.get('model')
            year = car_data.get('year')
            mileage = car_data.get('mileage')
            price = car_data.get('price')
            place = car_data.get('place')
            description = car_data.get('description')

            car_id = await add_car(user_id, make, model, year, mileage, price, place, description)
            logging.info(f"Car ad created with ID {car_id} for user {user_id}")

            context.user_data['car_id'] = car_id
            context.user_data['car_info'] = car_data
            context.user_data['photo_count'] = 0
            context.user_data['user_id'] = user_id
            del context.user_data['car_data']
            del context.user_data['step']
            context.user_data['in_ad_form'] = False

            message = await update.message.reply_text(
                '–•–æ—Ç–∏—Ç–µ –ª–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é?',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –î–∞", callback_data="add_photos_")],
                    [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="finish_photos_")]
                ])
            )
            context.user_data['last_message_id'] = message.message_id
            logging.info(f"Prompted user {update.message.from_user.id} to add photos")

    except Exception as e:
        logging.error(f"Error in handle_new_ad_input handler: {e}")
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')


